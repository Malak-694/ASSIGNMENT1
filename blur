// Program: demo2.cpp
// Purpose: Demonstrate use of bmplip for handling
//          bmp colored and grayscale images
//          Program load a gray image and store in another file
// Author:  Mohammad El-Ramly
// Date:    30 March 2018
// Version: 1.0

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include "bmplib.cpp"

using namespace std;
unsigned char image[SIZE][SIZE];

void loadImage ();
void saveImage ();
void doSomethingForImage ();

int main()
{
    loadImage();
    doSomethingForImage();
    saveImage();
    return 0;
}

//_________________________________________
void loadImage () {
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    readGSBMP(imageFileName, image);
}

//_________________________________________
void saveImage () {
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    writeGSBMP(imageFileName, image);
}

//_________________________________________
void doSomethingForImage() {
    unsigned char n[SIZE][SIZE];
    int i,j;
    for (i = 0; i < 256; i++) {
        for (j = 0; j < 256; j++) {
            int sum = image[i][j];
            int count = 1;
            int x,y;
            // calculate the average of the surrounding pixels and then divide the sum on the number of them 
            for ( x = -2; x <= 2; x++) {
                for ( y = -2;y <= 2; y++) {
                    if (i + x >= 0 && i + x < 256 && j + y >= 0 && j + y < 256) {
                        sum += image[i + x][j + y];
                        count++;
                    }
                }
            }

            n[i][j] = sum / count;
        }
    }


    for ( i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
                image[i][j] = n[i][j];

        }
    }
}
