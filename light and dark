// Program: demo2.cpp
// Purpose: Demonstrate use of bmplip for handling
//          bmp colored and grayscale images
//          Program load a gray image and store in another file
// Author:  Mohammad El-Ramly
// Date:    30 March 2018
// Version: 1.0

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include "bmplib.cpp"

using namespace std;
unsigned char image[SIZE][SIZE];

void loadImage ();
void saveImage ();
void light ();
void dark ();

int main()
{
    char c;
    loadImage();
    cout<<"Do you want to (d)arken or (l)ighten?";
    cin>>c;
    if(c=='d') dark();
    else light();
    saveImage();
    return 0;
}

//_________________________________________
void loadImage () {
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    readGSBMP(imageFileName, image);
}

//_________________________________________
void saveImage () {
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    writeGSBMP(imageFileName, image);
}

//_________________________________________
void light() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j< SIZE; j++) {
            if(image[i][j]+ ((255-image[i][j])/2)< 255) {
//increase the value of the pixel by the half of the remaining in order not to have an overflow
                image[i][j]+= ((255-image[i][j])/2);
            }

        }
    }
}
//--------------------------------------------
void dark() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j< SIZE; j++) {
//divide the color by 2, so it can be darker since black is equal to 0
            if(image[i][j]- (image[i][j]/2)> 0) {
                image[i][j] -= (image[i][j] / 2);
            }
        }
    }
}
