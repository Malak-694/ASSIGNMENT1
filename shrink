// Program: demo2.cpp
// Purpose: Demonstrate use of bmplip for handling
//          bmp colored and grayscale images
//          Program load a gray image and store in another file
// Author:  Mohammad El-Ramly
// Date:    30 March 2018
// Version: 1.0

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include "bmplib.cpp"

using namespace std;
unsigned char image[SIZE][SIZE];

void loadImage ();
void saveImage ();
void doSomethingForImage2 ();
void doSomethingForImage3 ();
void doSomethingForImage4 ();

int main()
{
    string s;
    loadImage();
    cout<<"Shrink to (1/2) or (1/3) or (1/4)?";
    cin>>s;
    if(s=="1/2") doSomethingForImage2();
    else if (s=="1/3") doSomethingForImage3();
    else doSomethingForImage4();
    saveImage();
    return 0;
}

//_________________________________________
void loadImage () {
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    readGSBMP(imageFileName, image);
}

//_________________________________________
void saveImage () {
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    writeGSBMP(imageFileName, image);
}

//_________________________________________
void doSomethingForImage2() {
    unsigned char n[SIZE][SIZE];
    int x=0;
    int i,j;
//calculate the sum of surrounding 4 pixels and put them in targeted pixel then move by 2
    for (i = 0; i < SIZE-1; i+=2) {
        int y=0;
        for ( j = 0; j< SIZE-1; j+=2) {
            n[x][y]=(image[i][j]+image[i+1][j+1]+image[i][j+1]+image[i+1][j])/4;
            y++;

        }
        x++;

    }
    for ( i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (i < 127 && j < 127) {
                image[i][j] = n[i][j];
            } else
                image[i][j] = 255;
        }
    }}

    //------------------------
void doSomethingForImage3() {
        unsigned char n[SIZE][SIZE];
        int x=0;
        int i,j;
//calculate the sum of surrounding 8 pixels and put them in targeted pixel then move by 3
        for (i = 0; i < SIZE-1; i+=3) {
            int y=0;
            for ( j = 0; j< SIZE-1; j+=3) {
                n[x][y]=(image[i][j]+
                        image[i][j+1]+
                        image[i][j+2]+
                        image[i+1][j]+
                        image[i+1][j+1]+
                        image[i+1][j+2]+
                        image[i+2][j]+
                        image[i+2][j+1]+
                        image[i+2][j+2]
                        )/9;

                y++;

            }
            x++;

        }
        for ( i = 0; i < SIZE; i++) {
            for (j = 0; j < SIZE; j++) {
                if (i < 85 && j < 85) {
                    image[i][j] = n[i][j];
                } else
                    image[i][j] = 255;
            }
        }}

//-----------------------------------
void doSomethingForImage4() {
    unsigned char n[SIZE][SIZE];
    int x=0;
    int i,j;
//calculate the sum of surrounding 15 pixels and put them in targeted pixel then move by 4
    for (i = 0; i < SIZE-1; i+=4) {
        int y=0;
        for ( j = 0; j< SIZE-1; j+=4) {
            n[x][y]=(image[i][j]+
                     image[i][j+1]+
                     image[i][j+2]+
                     image[i][j+3]+
                     image[i+1][j]+
                     image[i+1][j+1]+
                     image[i+1][j+2]+
                     image[i+1][j+3]+
                     image[i+2][j]+
                     image[i+2][j+1]+
                     image[i+2][j+2]+
                     image[i+2][j+3]+
                    image[i+3][j]+
                    image[i+3][j+1]+
                    image[i+3][j+2]+
                    image[i+3][j+3]
                    )/16;
            y++;

        }
        x++;

    }
    for ( i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (i < 64 && j < 64) {
                image[i][j] = n[i][j];
            } else
                image[i][j] = 255;
        }
    }}
